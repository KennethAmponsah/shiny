% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{reactiveStop}
\alias{reactiveStop}
\title{Propagate an error through Shiny, but catch it before it throws}
\usage{
reactiveStop(message = "", class = NULL, type = c("validation",
  "shiny.output.cancel"))
}
\arguments{
\item{message}{An optional error message.}

\item{class}{An optional class to add to the error.}

\item{type}{The type of reactive error that should be used depending
on whether we want to be able to see the error message (use "validation")
or whether we want to keep the output in the last valid state (use
"shiny.output.cancel").}
}
\description{
Throws a type of exception that is caught by observers. When such an
exception is triggered, all reactive links are broken. So, essentially,
\code{reactiveStop()} behaves just like \code{stop()}, except that
instead of ending the session, it is silently swalowed by Shiny.
}
\details{
This function should be used when you want to disrupt the reactive
links in a reactive chain, but do not want to end the session. For
example, this enables you to disallow certain inputs, but get back
to business as usual when valid inputs are re-entered.
\code{reactiveStop} is also called internally by Shiny to create
special errors, such as the ones generated by \code{\link{validate}()},
\code{\link{req}()} and \code{\link{cancelOutput}()}.
}
\examples{
## Note: the breaking of the reactive chain that happens in the app
## below (when input$txt = 'bad' and input$allowBad = 'FALSE') is
## easily visualized with `showReactLog()`

## Only run examples in interactive R sessions
if (interactive()) {

ui <- fluidPage(
  textInput('txt', 'Enter some text...'),
  selectInput('allowBad', 'Allow the string \\'bad\\'?',
              c('TRUE', 'FALSE'), selected = 'FALSE')
)

server <- function(input, output) {
  val <- reactive({
    if (!(as.logical(input$allowBad))) {
      if (identical(input$txt, "bad")) {
        reactiveStop()
      }
    }
  })

  observe({
    val()
  })
}

shinyApp(ui, server)
}
}

